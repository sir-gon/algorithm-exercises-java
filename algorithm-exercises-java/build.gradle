/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'
    id 'com.adarshr.test-logger' version '4.0.0'
    id "org.sonarqube" version "4.4.1.3373"
    id "com.github.ben-manes.versions" version "0.51.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:33.0.0-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'projecteuler.java.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.13.0'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    maxErrors	= 0
    maxWarnings	= 0
    showViolations = true
}

configurations.checkstyle {
  resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
    select("com.google.guava:guava:33.0.0-jre")
  }
}

def jacocoExclusions = [
        '**/*App.class',
        '**/CustomLogger.class'
];

test {
    maxHeapSize = "1024m"

    finalizedBy jacocoTestReport // report is always generated after tests run

    // Reference: https://discuss.gradle.org/t/unable-to-configure-java-util-logging-with-gradle-test-task/2034
    systemProperty 'java.util.logging.config.file', 'build/resources/test/logging.properties'

    // Reference: https://stackoverflow.com/a/43289870/6366150
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }

    beforeTest { descriptor ->
      logger.lifecycle("Running test: ${descriptor}")
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        html.required = true

        xml {
            required = true
            outputLocation = file("$buildDir/jacoco.xml")
        }
    }

    afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it,
              exclude: jacocoExclusions
      )
    }))
  }
}

jacocoTestCoverageVerification {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it,
              exclude: jacocoExclusions
      )
    }))
  }
  violationRules {
    rule {
      excludes = jacocoExclusions
      limit {
        minimum = 0.90
      }
    }
  }
}

sonar {
  properties {
    property "sonar.projectKey", "sir-gon_algorithm-exercises-java"
    property "sonar.organization", "sir-gon"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}
